package Day19;

import java.util.TreeSet;

public class Day19_5 {
	
	public static void main(String[] args) {
		//p753 : TreeSet 클래스
			//1.하나의 객체 = 노드
			//2. 각 노드는 최대 2개의 자식 노드를 가질수 있다 .
			//3. 부모보다 작으면 왼쪽 자식/ 부모보다 크면 오른쪽 자식
			
		//1. TreeSet 클래스의 객체선언
		TreeSet<Integer> scores = new TreeSet<>();
		//2. TreeSet 객체에 객체(요소) 추가 
		System.out.println("-----자동정렬-----");
		scores.add(87); System.out.println("확인 " + scores );
		scores.add(98); System.out.println("확인 " + scores );
		scores.add(75); System.out.println("확인 " + scores );
		scores.add(95); System.out.println("확인 " + scores );
		scores.add(80); System.out.println("확인 " + scores );
		
		//3. 
		System.out.println( scores.first() ); //제일 낮은 객체를 리턴  가장 왼쪽 노트[가장 작은] 호출
		System.out.println( scores.last() ); //제일높은 객체를 리턴 가장 오른쪽 노드 호출
		System.out.println( scores.lower(95) ); // 주어진 객체보다 아래 객체를 리턴
		System.out.println( scores.higher(95) ); // 주어진 객체보다 위에 객체를 리턴
		System.out.println(scores.floor(95)); //95포함 기준으로 왼쪽노드[ 95보다 같거나 작은]
		System.out.println(scores.ceiling(85)); //85포함 기준으로 왼쪽노드[ 85보다 같거나 큰]
		
		//4.
		System.out.println(scores.pollFirst()); // 가장 오른쪽노드 [가장 큰] 삭제
		System.out.println(scores.pollLast()); // 가장 왼쪽노드[가장 작은] 삭제
		System.out.println("확인: " +scores);
		//5. 오름차순 vs 내림차순 오름차순(기본값)
		System.out.println(" 정렬순서 \n [오름차순]: "+ scores );
		// 내림차순
		System.out.println( " [내림차순] : " + scores.descendingSet()); //내림차순으로 바꿔주는것
		
		for( Integer temp : scores ) { System.out.println(temp); 

		
		for( Integer tmep : scores.descendingSet()) {
			System.out.println(tmep);
		}
	}


}
